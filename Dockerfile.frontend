# 网址监控系统 - 标准前端Dockerfile
# 适用于标准生产环境的前端镜像

# 构建阶段
FROM node:18-bullseye-slim AS builder

# 设置构建参数
ARG BUILD_ENV=production
ARG API_BASE_URL=http://localhost:5000
ARG DEBIAN_FRONTEND=noninteractive

WORKDIR /app

# 设置环境变量
ENV NODE_ENV=production \
    GENERATE_SOURCEMAP=false \
    TZ=Asia/Shanghai \
    NPM_CONFIG_FUND=false \
    NPM_CONFIG_AUDIT=false \
    NPM_CONFIG_UPDATE_NOTIFIER=false

# 安装系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 \
    make \
    g++ \
    curl \
    git \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# 配置npm - 使用国内镜像源提高下载速度
RUN npm config set registry https://registry.npmmirror.com/ && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fund false && \
    npm config set audit false && \
    npm cache clean --force

# 复制package文件
COPY frontend/package*.json ./

# 删除可能存在的lock文件以避免版本冲突
RUN rm -f package-lock.json yarn.lock

# 安装最新npm
RUN npm install -g npm@latest

# 创建优化的package.json，解决rollup版本问题
RUN cat > package.json << 'EOF'
{
  "name": "website-monitor-frontend",
  "version": "1.0.0",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "keywords": [
    "website-monitor",
    "vue",
    "element-plus"
  ],
  "author": "",
  "license": "MIT",
  "description": "网址监控工具前端界面",
  "dependencies": {
    "@element-plus/icons-vue": "^2.3.0",
    "axios": "^1.6.0",
    "element-plus": "^2.4.0",
    "pinia": "^3.0.3",
    "vue": "^3.4.0",
    "vue-router": "^4.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^4.5.0",
    "vite": "^4.5.0",
    "rollup": "^4.0.0"
  }
}
EOF

# 分步安装依赖以提高成功率
RUN echo "安装核心依赖..." && \
    npm install --force --legacy-peer-deps --no-package-lock \
    vue@^3.4.0 \
    vue-router@^4.2.0 \
    axios@^1.6.0 \
    && echo "安装UI库..." && \
    npm install --force --legacy-peer-deps --no-package-lock \
    element-plus@^2.4.0 \
    @element-plus/icons-vue@^2.3.0 \
    pinia@^3.0.3 \
    && echo "安装构建工具..." && \
    npm install --force --legacy-peer-deps --no-package-lock \
    @vitejs/plugin-vue@^4.5.0 \
    vite@^4.5.0 \
    && echo "安装rollup..." && \
    npm install --force --legacy-peer-deps --no-package-lock \
    rollup@^4.0.0

# 手动处理rollup平台特定依赖
RUN npm install @rollup/rollup-linux-x64-gnu --save-dev --force || true

# 复制源代码
COPY frontend/ .

# 创建优化的vite配置
RUN cat > vite.config.js << 'EOF'
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

export default defineConfig({
  plugins: [vue()],
  server: {
    host: '0.0.0.0',
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://backend:5000',
        changeOrigin: true,
        secure: false
      }
    }
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    sourcemap: false,
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['vue', 'vue-router', 'axios'],
          elementPlus: ['element-plus', '@element-plus/icons-vue']
        }
      }
    }
  },
  define: {
    __VUE_OPTIONS_API__: true,
    __VUE_PROD_DEVTOOLS__: false
  }
})
EOF

# 构建应用
RUN echo "开始构建前端应用..." && \
    npm run build && \
    ls -la dist/ && \
    echo "前端构建完成"

# 生产阶段
FROM nginx:alpine

# 设置时区和环境变量
ENV TZ=Asia/Shanghai

RUN apk add --no-cache tzdata curl && \
    cp /usr/share/zoneinfo/$TZ /etc/localtime && \
    echo $TZ > /etc/timezone

# 复制构建结果
COPY --from=builder /app/dist /usr/share/nginx/html

# 创建nginx配置
RUN cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # 安全头
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;

    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # 静态文件缓存
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    # API代理到后端容器
    location /api/ {
        proxy_pass http://backend:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # CORS处理
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        
        # OPTIONS请求处理
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # 前端路由处理（Vue Router history模式）
    location / {
        try_files $uri $uri/ /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # 健康检查
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 172.0.0.0/8;
        deny all;
    }
}
EOF

# 创建日志目录和设置权限
RUN mkdir -p /var/log/nginx && \
    chmod -R 755 /usr/share/nginx/html && \
    chmod -R 755 /var/log/nginx

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# 暴露端口
EXPOSE 80

# 启动nginx
CMD ["nginx", "-g", "daemon off;"]
