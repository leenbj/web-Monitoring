# 网址监控系统 - 纯后端部署配置
# 前后端分离方案，仅部署后端API服务

services:
  # 后端API服务
  backend:
    image: leenbj68719929/website-monitor-backend:fixed
    container_name: website-monitor-backend
    restart: unless-stopped
    
    environment:
      # 数据库配置
      - DATABASE_URL=mysql://${DB_USER:-monitor_user}:${DB_PASSWORD}@mysql:3306/${DB_NAME:-website_monitor}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # 应用安全配置
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      
      # 邮件配置
      - MAIL_SERVER=${MAIL_SERVER:-smtp.qq.com}
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_USE_TLS=${MAIL_USE_TLS:-true}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      
      # 运行环境配置
      - FLASK_ENV=production
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TZ=${TZ:-Asia/Shanghai}
      - PYTHONUNBUFFERED=1
    
    ports:
      - "5013:5000"  # 映射到5013端口
    
    volumes:
      # 数据持久化
      - ./data/backend:/app/database
      - ./logs/backend:/app/backend/logs
      - ./uploads:/app/backend/uploads
      - ./downloads:/app/backend/downloads
      - ./user_files:/app/backend/user_files
    
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - backend_network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
  
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: website-monitor-mysql
    restart: unless-stopped
    
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME:-website_monitor}
      - MYSQL_USER=${DB_USER:-monitor_user}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - TZ=${TZ:-Asia/Shanghai}
    
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    
    volumes:
      - ./data/mysql:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/conf:/etc/mysql/conf.d
      - ./backups:/backups
    
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --max_connections=200
      --innodb_buffer_pool_size=256M
    
    networks:
      - backend_network
    
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER:-monitor_user}", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
  
  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: website-monitor-redis
    restart: unless-stopped
    
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    volumes:
      - ./data/redis:/data
    
    networks:
      - backend_network
    
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # 可选：PhpMyAdmin数据库管理工具
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: website-monitor-phpmyadmin
    restart: unless-stopped
    
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_USER=${DB_USER:-monitor_user}
      - PMA_PASSWORD=${DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - UPLOAD_LIMIT=100M
    
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80"
    
    depends_on:
      mysql:
        condition: service_healthy
    
    networks:
      - backend_network
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

# 网络配置 (内部网络，不对外暴露)
networks:
  backend_network:
    driver: bridge
    internal: false  # 允许外部访问，但只通过指定端口