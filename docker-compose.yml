version: '3.8'

name: website-monitor-production

services:
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: website_monitor_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-WebMonitor2024!}
      MYSQL_DATABASE: website_monitor
      MYSQL_USER: monitor_user
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-MonitorUser2024!}
      TZ: Asia/Shanghai
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d:ro
      - ./mysql/conf:/etc/mysql/conf.d:ro
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    command: >
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
      --skip-character-set-client-handshake
      --max_connections=200
      --innodb_buffer_pool_size=256M
      --innodb_log_buffer_size=16M
      --innodb_flush_log_at_trx_commit=1
      --sync_binlog=1
      --sql_mode=STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-WebMonitor2024!}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - monitor_network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: website_monitor_redis
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-RedisCache2024!}
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-RedisCache2024!}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - monitor_network

  # 后端API服务
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      args:
        - BUILD_ENV=production
    container_name: website_monitor_backend
    restart: unless-stopped
    environment:
      # 数据库配置
      DATABASE_URL: mysql+pymysql://monitor_user:${MYSQL_PASSWORD:-MonitorUser2024!}@mysql:3306/website_monitor?charset=utf8mb4
      # Redis配置
      REDIS_URL: redis://:${REDIS_PASSWORD:-RedisCache2024!}@redis:6379/0
      # Flask配置
      SECRET_KEY: ${SECRET_KEY:-WebMonitorSecretKey2024ChangeMeInProduction}
      FLASK_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      TZ: Asia/Shanghai
      # 应用配置
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
      PYTHONDONTWRITEBYTECODE: 1
      # 邮件配置
      MAIL_SERVER: ${MAIL_SERVER:-smtp.qq.com}
      MAIL_PORT: ${MAIL_PORT:-587}
      MAIL_USE_TLS: ${MAIL_USE_TLS:-True}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_DEFAULT_SENDER: ${MAIL_DEFAULT_SENDER}
      # 域名配置
      DOMAIN: ${DOMAIN:-localhost}
    volumes:
      - ./backend/logs:/app/backend/logs
      - ./backend/uploads:/app/backend/uploads
      - ./backend/downloads:/app/backend/downloads
      - ./backend/user_files:/app/backend/user_files
      - ./database:/app/database
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - monitor_network

  # 前端Web服务
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      args:
        - BUILD_ENV=production
        - API_BASE_URL=${API_BASE_URL:-http://localhost:5000}
    container_name: website_monitor_frontend
    restart: unless-stopped
    environment:
      TZ: Asia/Shanghai
      # Nginx配置
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx
      # 后端API地址
      BACKEND_HOST: backend
      BACKEND_PORT: 5000
    volumes:
      - ./nginx/logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "${FRONTEND_PORT:-80}:80"
      - "${FRONTEND_SSL_PORT:-443}:443"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - monitor_network

volumes:
  mysql_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/mysql
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis

networks:
  monitor_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}
          gateway: ${NETWORK_GATEWAY:-172.20.0.1}