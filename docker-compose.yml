name: webmonitor

services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: webmonitor-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: website_monitor
      MYSQL_USER: webmonitor
      MYSQL_PASSWORD: webmonitor123
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "33061:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    networks:
      - webmonitor

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: webmonitor-redis
    restart: unless-stopped
    ports:
      - "63791:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
    networks:
      - webmonitor

  # 后端服务 - 使用 Docker Hub 镜像
  backend:
    # 本地构建
    build:
      context: .
      dockerfile: Dockerfile
    container_name: webmonitor-backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # 数据库配置
      DATABASE_URL: mysql://webmonitor:webmonitor123@mysql:3306/website_monitor
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USER: webmonitor
      MYSQL_PASSWORD: webmonitor123
      MYSQL_DATABASE: website_monitor
      
      # Redis 配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # 应用配置
      SECRET_KEY: WebMonitorSecretKey2024ChangeMeInProduction
      FLASK_ENV: production
      FLASK_APP: run_backend.py
      
      # 其他配置
      TZ: Asia/Shanghai
      
      # 构建信息（可选）
      VERSION: latest
      BUILDPLATFORM: linux/amd64
      TARGETPLATFORM: linux/amd64
    ports:
      - "5012:5000"
    volumes:
      - backend_data:/app/backend/logs
      - backend_uploads:/app/backend/uploads
      - backend_downloads:/app/backend/downloads
      - backend_user_files:/app/backend/user_files
      - backend_database:/app/database
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    networks:
      - webmonitor

  # 前端服务 (可选，如果需要一体化部署)
  frontend:
    image: nginx:alpine
    container_name: webmonitor-frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "8080:80"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - webmonitor

# 数据卷
volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_data:
    driver: local
  backend_uploads:
    driver: local
  backend_downloads:
    driver: local
  backend_user_files:
    driver: local
  backend_database:
    driver: local

# 网络
networks:
  webmonitor:
    driver: bridge